#  End To End Test Development

# IMPORTANT: depends on the main docker-compose.yml

# START
# This will start the services for test development
#   cd pagy-on-docker
#   docker-compose -f docker-compose.yml \
#                  -f docker-compose.e2e-dev.yml \
#                   up ruby e2e-dev

# USAGE (run from the container)
# CYPRESS HEADLESS
#   npx cypress run [--project /pagy/test/e2e]
# CYPRESS INTERACTIVE
#   npx cypress open [--project /pagy/test/e2e]

version: "3.8"
services:
  # depends on the main ruby docker-compose setup
  # this changes the command to run the test app that cypress needs
  ruby:
    ports:
      - "4567:4567"
    command: rerun -- rackup -o 0.0.0.0 -p 4567 test/e2e/pagy_app.ru

  e2e-dev:
    depends_on:
      - ruby
    image: pagy-e2e-dev:latest
    build:
      context: .
      dockerfile: Dockerfile.e2e-dev
      args:
        # arguments passed to the docker build: come from local ENV (.env file)
        user: $USER
        group: $GROUP
        uid: $UID
        gid: $GID
        term: ${TERM:-xterm-256color}
    container_name: pagy-e2e-dev
    environment:
      - CYPRESS_CACHE_FOLDER=/home/$USER/.cache/Cypress
      - CYPRESS_baseUrl=http://0.0.0.0:4567
      - DISPLAY
      # you may want to omit the =/dev/null if you want to use your actual host value
      # and avoid errors, however it may work also with errors
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
    privileged: true
    network_mode: host
    working_dir: /pagy/test/e2e
    volumes:
      - ..:/pagy # repo dir mount
      - /opt/google/chrome:/opt/google/chrome
      - e2e_user_home:/home/$USER
      - e2e_node_modules:/pagy/test/e2e/node_modules

      # IMPORTANT: Try to open cypress: if it doesn't open, read
      # the error messages in the container terminal for clues
      # about what is missing. Not all the errors are fatal, so
      # if it starts with error it's fine.
      # A few suggested mounts in case cypress doesn't open
      # (use only in case of problems):

      # Working on ubuntu 20.10 host uid 1000
      # - /run/user/1000/bus:/run/user/1000/bus
      # - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket

      # For other OSs
      # - $XAUTHORITY:/root/.Xauthority:rw
      # - $HOME/.Xauthority:/root/.Xauthority:rw

      # For macOS:
      # - /tmp/.X11-unix:/tmp/.X11-unix
    command: /bin/sh -c "while sleep 1000; do :; done"
    entrypoint: []
    stdin_open: true
    tty: true

volumes:
  # persists the user home
  e2e_user_home:
    name: pagy_e2e_user_home
  # the local node_modules are in a docker volume instead of the host filesystem repo
  e2e_node_modules:
    name: pagy_e2e_node_modules
